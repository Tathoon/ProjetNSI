FlatIcone
Utilisation de la bibliothèque Pygame:

    • Importer la biblio :

Import pygame
from pygame.locals import *

    • Initialiser la biblio :

pygame.init()

    • Créer une fenêtre fonctionnelle de dimmension x,y (qui se ferme lorsque l'on appuie sur la croix):

pygame.init()
fenetre = pygame.display.set_mode((x, y))
Bool=True
while Bool:
	for event in pygame.event.get():
		if event.type == QUIT:
			Bool=False
pygame.quit()

    • Remplir l’arrière plan :

background = pygame.Surface(screen.get_size())	#.get_size() permet de prendre les dimensions de la fenêtre pygame
background = background.convert() qui permet de convertir l'image choisie dans un format plus adapté
background.fill((250, 250, 250)) nécessaire lors du déplacement d'une image en remettant à zero la zone d'affichage

    • Mettre du texte sur l’arrière plan :

font = pygame.font.Font(None, 36)
text = font.render("Hello There", 1, (10, 10, 10))
textpos = text.get_rect()
textpos.centerx = background.get_rect().centerx
background.blit(text, textpos) qui permet de transformer l'arriere plan en changeant la valeur de chaque pixel

    • Rajouter une image (définir l'ap ou en rajouter une dessus) :

fond=pygame.image.load("image.jpg").convert()
fenetre.blit(fond,(0,0))

Rajouter pygame.display.update()  ou pygame.display.flip() à la fin de la boucle for

    • Déplacer une image :

-->Utiliser des objets dits de type Rect (rectangle en 2D)

Définir un objet Rect :

    • les déplacements

entiers :top,left,bottom,right,centerx, centery
tuples:bottomleft,bottomright,topleft,topright,midtop,midleft,midbottom,
midright, center
.move(x,y)
Ex: perso.topleft(x,y)
    • la taille de l'objet

size, width, height – w, h


    • Utiliser les touches pour réaliser des actions :

On doit utiliser K_ devant la touche correspondante 
Type :
pygame.KEYDOWN ou pygame.KEYUP
Ex : if event.key == pygame.K_(touche):
Ex : K_9 ou K_G

NB : Il est également possible de détecter ses touches lorsque que celles-ci sont pressées et le temps de leur pression
--> méthode get_pressed()

	Stocker des infos sur la fenêtre dans des variables

Taille : screen.get_size()
Hauteur : screen.get_height()
Width : screen.get_width()

	Update une fenêtre 

pygame.display.update()
pygame.display.flip()

	Définir les évènements réalisés :

	Détecter les clics de souris :
Type:
pygame.MOUSEBUTTONDOWN ou pygame.MOUSEBUTTONUP
gauche --> if event.button==1:
droite --> if event.button==2:
molette --> if event.button==3:

	Détecter les déplacements de souris :
Type:
pygame.MOUSEMOTION

	Activer de la musique

son = pygame.mixer.Sound("son.wav")
joue=True
	Jouer le son
son.play()

	Collisions 

pygame.sprite.spritecollide
#Trouve les sprites étant à l'intersection d'un sprite

pygame.sprite.collide_rect
#detecte collisions entre deux sprites mais utilise un rect

pygame.sprite.collide_rect_ratio
#detecte collisions entre deux sprites mais utilise un rect défini par un ratio

pygame.sprite.collide_circle
#detecte collisions entre deux sprites mais utilise un cercle

pygame.sprite.collide_circle_ratio
#detecte collisions entre deux sprites mais utilise un cercle défini par un ratio

pygame.sprite.collide_mask
#detecte collisions entre deux sprites mais utilise un mask

pygame.sprite.groupcollide
#trouve tous les sprites en collision avec un autre groupe de sprite

pygame.sprite.spritecollideany
#Test vérifiant si un sprite est en collision avec n'importe quoi

	Actions sur le son
pygame.mixer.pause()
pygame.mixer.unpause()

Gérer les fps du jeu :
Clock = pygame.time.clock () #variable stockant l'instance de l'objet clock
Clock.tick(60) # méthode tick() qui initialise les fps du jeu 

Hitbox d'un objet 
objet pygame.Rect
attributs de cet objet : pos x, pos y, largeur, hauteur

	Super-classe Sprite 

pygame.sprite.Sprite.update
#méthode controlant le comportement d'un sprite

pygame.sprite.Sprite.add
#méthode permettant d'ajouter un sprite à un groupe

pygame.sprite.Sprite.remove
#méthode qui retire le sprite du groupe

pygame.sprite.Sprite.kill
#méthode qui reire le sprite de tous les groupes

pygame.sprite.Sprite.alive
#méthode qui vérifie si le sprite appartient à un groupe donné

pygame.sprite.Sprite.groups
#méthode qui fait une liste des sprites appartenant à un groupe de sprites

	Super-classe Group

pygame.sprite.Group.sprites
list of the Sprites this Group contains

pygame.sprite.Group.copy
duplicate the Group

pygame.sprite.Group.add
add Sprites to this Group

pygame.sprite.Group.remove
remove Sprites from the Group

pygame.sprite.Group.has
test if a Group contains Sprites

pygame.sprite.Group.update
call the update method on contained Sprites

pygame.sprite.Group.draw
blit the Sprite images

pygame.sprite.Group.clear
draw a background over the Sprites

pygame.sprite.Group.empty
remove all Sprites

	Super-classes

super.__init__() #méthode pour appeler une super-classe
class NomClass(Super-classe1, Superclass2): Pour atttribuer à une classe des super-classes

Ex de super-classes : Sprite, DirtySprite, 

pygame.sprite.RenderUpdates.draw #autre méthode pour dessiner un Sprite 

	Super-classe LayeredUpdate
pygame.sprite.LayeredUpdates.add
add a sprite or sequence of sprites to a group
pygame.sprite.LayeredUpdates.sprites
returns a ordered list of sprites (first back, last top).
pygame.sprite.LayeredUpdates.draw
draw all sprites in the right order onto the passed surface.
pygame.sprite.LayeredUpdates.get_sprites_at
returns a list with all sprites at that position.
pygame.sprite.LayeredUpdates.get_sprite
returns the sprite at the index idx from the groups sprites
pygame.sprite.LayeredUpdates.remove_sprites_of_layer
removes all sprites from a layer and returns them as a list.
pygame.sprite.LayeredUpdates.layers
returns a list of layers defined (unique), sorted from bottom up.
pygame.sprite.LayeredUpdates.change_layer
changes the layer of the sprite
pygame.sprite.LayeredUpdates.get_layer_of_sprite
returns the layer that sprite is currently in.
pygame.sprite.LayeredUpdates.get_top_layer
returns the top layer
pygame.sprite.LayeredUpdates.get_bottom_layer
returns the bottom layer
pygame.sprite.LayeredUpdates.move_to_front
brings the sprite to front layer
pygame.sprite.LayeredUpdates.move_to_back
moves the sprite to the bottom layer
pygame.sprite.LayeredUpdates.get_top_sprite
returns the topmost sprite
pygame.sprite.LayeredUpdates.get_sprites_from_layer
returns all sprites from a layer, ordered by how they where added
pygame.sprite.LayeredUpdates.switch_layer
switches the sprites from layer1 to layer2
